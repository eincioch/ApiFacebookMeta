

@page "/facebook-login"  
@inject HttpClient Http  
@inject IJSRuntime JS  
@inject Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage.ProtectedLocalStorage ProtectedLocalStorage  
@inject IConfiguration Configuration
@inject SessionState SessionState

@rendermode InteractiveServer  

<PageTitle>Facebook</PageTitle>  

<h1>Login con Facebook</h1>  

<button class="btn btn-primary" @onclick="LoginFacebook">Iniciar sesión con Facebook</button>  

@if (!string.IsNullOrEmpty(Token))
{
    <div class="form-group">
        <label for="shortToken">Short-lived token:</label>
        <input id="shortToken" class="form-control w-100" type="text" value="@Token" readonly />
    </div>
}

@if (fanPages is not null && fanPages.Count > 0)
{
    <div class="mt-3">
        <label for="fanpageSelect">Selecciona una Fanpage:</label>
        <select id="fanpageSelect" class="form-control" @onchange="OnFanPageSelected">
            <option value="">-- Selecciona --</option>
            @foreach (var fanPage in fanPages)
            {
                <option value="@fanPage.id">@fanPage.name</option>
            }
        </select>
    </div>
}

@if (!string.IsNullOrEmpty(selectedPageId))  
{  
    <div class="alert alert-info mt-2">  
        <b>Fanpage seleccionada:</b> @selectedPageName<br />  
        <b>ID:</b> @selectedPageId  
    </div>  
}  

@code {
    public string Token { get; set; }  
    public string LongLivedToken { get; set; }  
    private List<FanPage> fanPages = new();  
    private string selectedPageId;  
    private string selectedPageName;  

    private bool scriptsLoaded = false;  
    private bool isLoggedIn = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)  
    {  
        if (firstRender && !scriptsLoaded)  
        {  
            // Carga el SDK de Facebook  
            await JS.InvokeVoidAsync("eval", @"  
                if (!window.fbAsyncInit) {  
                    window.fbAsyncInit = function() {  
                        FB.init({  
                            appId: '248812736348757',  
                            cookie: true,  
                            xfbml: true,  
                            version: 'v23.0'  
                        });  
                    };  
                    (function(d, s, id){  
                        var js, fjs = d.getElementsByTagName(s)[0];  
                        if (d.getElementById(id)) {return;}  
                        js = d.createElement(s); js.id = id;  
                        js.src = 'https://connect.facebook.net/es_ES/sdk.js';  
                        fjs.parentNode.insertBefore(js, fjs);  
                    }(document, 'script', 'facebook-jssdk'));  
                }  
            ");  

            // Carga tu archivo JS personalizado  
            await JS.InvokeVoidAsync("eval", @"  
                if (!window.loginWithFacebook) {  
                    var script = document.createElement('script');  
                    script.src = '/js/facebookLogin.js';  
                    document.head.appendChild(script);  
                }  
            ");  

            scriptsLoaded = true;  
        }  
    }  

    private async Task LoginFacebook()  
    {  
        // verificar si tiene estos permiso https://graph.facebook.com/v23.0/me/permissions?access_token=  
        // {  
        //     "data": [  
        //         { "permission": "pages_manage_posts", "status": "granted" },  
        //         { "permission": "pages_read_engagement", "status": "granted" },  
        //         { "permission": "public_profile", "status": "granted" }  
        //       ]  
        //     }  
        await JS.InvokeVoidAsync("loginWithFacebook", DotNetObjectReference.Create(this));  
    }  

    [JSInvokable]  
    public async Task OnFacebookLogin(string token)  
    {  
        Token = token;  
        isLoggedIn = !string.IsNullOrEmpty(token);
        SessionState.FbToken = token;
        await ProtectedLocalStorage.SetAsync("fb_token", token);  
        StateHasChanged();  

        // Solo después de obtener el token, llama a ObtenerFanPagesAsync
        if (isLoggedIn)
        {
            await ObtenerFanPagesAsync(token);
        }
    }  

    private async Task ObtenerFanPagesAsync(string userAccessToken)
    {
        if (string.IsNullOrEmpty(userAccessToken))
            return;

        var apiBaseUrl = Configuration["ApiBaseUrl"] ?? "https://localhost:7296";
        var url = $"{apiBaseUrl}/api/facebookauth/obtener-lista-fanpage";

        var response = await Http.PostAsJsonAsync(url, userAccessToken);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<FanPageListResponse>();
            fanPages = result?.fanpages ?? new List<FanPage>();
            StateHasChanged();
        }
        else
        {
            fanPages = new List<FanPage>();
        }
        StateHasChanged();
    }

    private async Task OnFanPageSelected(ChangeEventArgs e)
    {
        selectedPageId = e.Value?.ToString();
        var page = fanPages.FirstOrDefault(f => f.id == selectedPageId);
        selectedPageName = page?.name;

        if (!string.IsNullOrEmpty(selectedPageId))
        {
            SessionState.FbPageId = selectedPageId;
            await ProtectedLocalStorage.SetAsync("fb_page_id", selectedPageId);
            await MostrarPageIdAlmacenadoAsync();
        }
    }

    private async Task MostrarPageIdAlmacenadoAsync()
    {
        var pageIdResult = await ProtectedLocalStorage.GetAsync<string>("fb_page_id");
        if (pageIdResult.Success && !string.IsNullOrEmpty(pageIdResult.Value))
        {
            await JS.InvokeVoidAsync("alert", $"fb_page_id almacenado: {pageIdResult.Value}");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "No hay fb_page_id almacenado.");
        }
    }

    // Clases auxiliares para deserializar la respuesta
    public class FanPageListResponse
    {
        public List<FanPage> fanpages { get; set; }
    }

    public class FanPage
    {
        public string id { get; set; }
        public string name { get; set; }
        public string access_token { get; set; }
        public string category { get; set; }
        public List<Category> category_list { get; set; }
        public List<string> tasks { get; set; }
    }

    public class Category
    {
        public string id { get; set; }
        public string name { get; set; }
    }

    public class TokenResponse  
    {  
        public string access_token { get; set; }  
    }  
}